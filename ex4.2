class Solution {
public:
    string longestNiceSubstring(string s) {
        int n = s.length();
        if (n < 2) return ""; // A nice string must have at least 2 characters

        unordered_set<char> st(s.begin(), s.end());

        for (int i = 0; i < n; i++) {
            char c = s[i];
            if (st.count(tolower(c)) && st.count(toupper(c))) {
                continue; // If both uppercase and lowercase exist, continue
            }

            // If a character breaks the "nice" condition, split the string
            string left = longestNiceSubstring(s.substr(0, i));
            string right = longestNiceSubstring(s.substr(i + 1));

            return left.size() >= right.size() ? left : right;
        }
        
        return s; // If the whole string is nice, return it
    }
};