class Solution {
public:
    int maxCrossingSum(vector<int>& nums, int left, int mid, int right) {
        int leftSum = INT_MIN, rightSum = INT_MIN, sum = 0;

        // Max sum on the left side including mid
        for (int i = mid; i >= left; i--) {
            sum += nums[i];
            leftSum = max(leftSum, sum);
        }

        sum = 0;
        // Max sum on the right side excluding mid
        for (int i = mid + 1; i <= right; i++) {
            sum += nums[i];
            rightSum = max(rightSum, sum);
        }

        return leftSum + rightSum;
    }

    int maxSubArrayHelper(vector<int>& nums, int left, int right) {
        if (left == right) return nums[left]; // Base case: single element

        int mid = left + (right - left) / 2;
        
        int leftMax = maxSubArrayHelper(nums, left, mid); // Left half
        int rightMax = maxSubArrayHelper(nums, mid + 1, right); // Right half
        int crossMax = maxCrossingSum(nums, left, mid, right); // Cross sum

        return max({leftMax, rightMax, crossMax});
    }

    int maxSubArray(vector<int>& nums) {
        return maxSubArrayHelper(nums, 0, nums.size() - 1);
    }
};